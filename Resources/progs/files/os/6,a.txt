AIM:
  To write a C program to implement round robin scheduling.

ALGORITHM:
  1. Read no. of processes and time quantum (TQ).
  2. Read process name and burst time (BT) for each process.
  3. Ready queue is treated as a circular queue. CPU schedules all processes (according to their order of arrival) only up to the given time quantum.
  4. A timer is set to interrupt the scheduling if the time quantum expires for a process.
  5. If BT of a process is greater than TQ, then after executing up to TQ, it gets added to the tail of the ready queue.
  6. If BT of a process is less than TQ, then the CPU gets released from it and schedules the next process in the ready queue.
  7. Set the waiting time (WT) of the first process as zero and turnaround time (TAT) as burst time.
  8. Calculate the waiting time and turnaround time of other processes as follows:
     - \( P_i (\text{WT}) = P_{i-1}(\text{WT}) + P_{i-1}(\text{BT}) \)
     - \( P_i (\text{TAT}) = P_i (\text{BT}) + P_i (\text{WT}) \)
  9. Calculate and display average WT and TAT.
  10. Display the order of execution of processes, i.e., process name, burst time, WT, and TAT.

PROGRAM:
#include <stdio.h>

int main() {
    int n;
    printf("Enter Total Number of Processes: ");
    scanf("%d", &n);
    
    int wait_time = 0, ta_time = 0, arr_time[n], burst_time[n], temp_burst_time[n];
    int x = n;

    for (int i = 0; i < n; i++) {
        printf("Enter Details of Process %d\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &arr_time[i]);
        printf("Burst Time: ");
        scanf("%d", &burst_time[i]);
        temp_burst_time[i] = burst_time[i];
    }

    int time_slot;
    printf("Enter Time Slot: ");
    scanf("%d", &time_slot);

    int total = 0, counter = 0, i;
    printf("\nProcess ID\tBurst Time\tTurnaround Time\tWaiting Time\n");

    for (total = 0, i = 0; x != 0;) {
        if (temp_burst_time[i] <= time_slot && temp_burst_time[i] > 0) {
            total += temp_burst_time[i];
            temp_burst_time[i] = 0;
            counter = 1;
        } else if (temp_burst_time[i] > 0) {
            temp_burst_time[i] -= time_slot;
            total += time_slot;
        }

        if (temp_burst_time[i] == 0 && counter == 1) {
            x--;
            printf("Process No %d\t\t%d\t\t%d\t\t\t%d\n", i + 1, burst_time[i], total - arr_time[i], total - arr_time[i] - burst_time[i]);
            wait_time += total - arr_time[i] - burst_time[i];
            ta_time += total - arr_time[i];
            counter = 0;
        }

        if (i == n - 1) {
            i = 0;
        } else if (arr_time[i + 1] <= total) {
            i++;
        } else {
            i = 0;
        }
    }

    float average_wait_time = (float)wait_time / n;
    float average_turnaround_time = (float)ta_time / n;
    printf("\nAverage Waiting Time: %f", average_wait_time);
    printf("\nAverage Turnaround Time: %f\n", average_turnaround_time);

    return 0;
}

OUTPUT:
[root@srmist ~]$ gcc -o a.out roundRobinAlgo.c
[root@srmist ~]$ ./a.out
Enter Total Number of Processes: 3
Enter Details of Process 1
Arrival Time: 0
Burst Time: 4
Enter Details of Process 2
Arrival Time: 1
Burst Time: 5
Enter Details of Process 3
Arrival Time: 2
Burst Time: 6
Enter Time Slot: 3
Process ID    Burst Time    Turnaround Time    Waiting Time
Process No 1        4              9                   5
Process No 2        5              13                  8
Process No 3        6              16                  10

Average Waiting Time: 7.666667
Average Turnaround Time: 12.666667