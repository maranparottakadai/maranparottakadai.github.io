AIM:
  To write a C program to implement priority scheduling.

ALGORITHM:
  1. Read the number of processes.
  2. Read process IDs, burst time (BT), and priority for each process.
  3. Sort the processes in the ready queue according to priority (i.e., processes with higher priority are placed at the head of the queue). The CPU schedules processes with the highest priority first, followed by others.
  4. Set the waiting time (WT) of the first process as zero and its turnaround time (TAT) as burst time.
  5. Calculate the waiting time and turnaround time of other processes as follows:
     - \( P_i (\text{WT}) = P_{i-1}(\text{WT}) + P_{i-1}(\text{BT}) \)
     - \( P_i (\text{TAT}) = P_i (\text{BT}) + P_i (\text{WT}) \)
  6. Calculate and display average WT and TAT.
  7. Display the order of execution of processes, including process ID, burst time, priority, WT, and TAT.
  8. Stop the program.

PROGRAM:
#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    int n;
    printf("Enter Number of Processes: ");
    scanf("%d", &n);
    
    int b[n], p[n], index[n];
    
    for (int i = 0; i < n; i++) {
        printf("Enter Burst Time and Priority Value for Process %d: ", i + 1);
        scanf("%d %d", &b[i], &p[i]);
        index[i] = i + 1;
    }
    
    for (int i = 0; i < n; i++) {
        int highest_priority = p[i], pos = i;
        for (int j = i; j < n; j++) {
            if (p[j] > highest_priority) {
                highest_priority = p[j];
                pos = j;
            }
        }
        swap(&p[i], &p[pos]);
        swap(&b[i], &b[pos]);
        swap(&index[i], &index[pos]);
    }
    
    int t = 0;
    printf("\nOrder of process execution is:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d is executed from %d to %d\n", index[i], t, t + b[i]);
        t += b[i];
    }
    
    printf("\n");
    printf("Process ID\tBurst Time\tWait Time\tTurnAround Time\n");
    
    int wait_time = 0;
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\n", index[i], b[i], wait_time, wait_time + b[i]);
        wait_time += b[i];
    }
    
    return 0;
}

OUTPUT:
[root@srmist ~]$ gcc -o a.out prioritySchedulingAlgo.c
[root@srmist ~]$ ./a.out
Enter Number of Processes: 3
Enter Burst Time and Priority Value for Process 1: 4 2
Enter Burst Time and Priority Value for Process 2: 3 1
Enter Burst Time and Priority Value for Process 3: 5 3

Order of process execution is:
P3 is executed from 0 to 5
P1 is executed from 5 to 9
P2 is executed from 9 to 12

Process ID   Burst Time   Wait Time   TurnAround Time
P3           5            0           5
P1           4            5           9
P2           3            9           12